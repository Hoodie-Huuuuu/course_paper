# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import segmenter_service_pb2 as segmenter__service__pb2


class SegmenterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.loadImage = channel.unary_unary(
                '/Segmenter/loadImage',
                request_serializer=segmenter__service__pb2.LoadImageRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.newMethod = channel.unary_unary(
                '/Segmenter/newMethod',
                request_serializer=segmenter__service__pb2.NewMethodRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.sendNewSens = channel.unary_unary(
                '/Segmenter/sendNewSens',
                request_serializer=segmenter__service__pb2.SensitivityValue.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.sendMarkerMask = channel.unary_unary(
                '/Segmenter/sendMarkerMask',
                request_serializer=segmenter__service__pb2.MarkerMask.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.getMarkedMask2D = channel.unary_unary(
                '/Segmenter/getMarkedMask2D',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=segmenter__service__pb2.Mask2D.FromString,
                )
        self.getRegions = channel.unary_unary(
                '/Segmenter/getRegions',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=segmenter__service__pb2.Mask2D.FromString,
                )
        self.popState = channel.unary_unary(
                '/Segmenter/popState',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=segmenter__service__pb2.Mask2D.FromString,
                )


class SegmenterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def loadImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def newMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendNewSens(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendMarkerMask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMarkedMask2D(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRegions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def popState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SegmenterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'loadImage': grpc.unary_unary_rpc_method_handler(
                    servicer.loadImage,
                    request_deserializer=segmenter__service__pb2.LoadImageRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'newMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.newMethod,
                    request_deserializer=segmenter__service__pb2.NewMethodRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'sendNewSens': grpc.unary_unary_rpc_method_handler(
                    servicer.sendNewSens,
                    request_deserializer=segmenter__service__pb2.SensitivityValue.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'sendMarkerMask': grpc.unary_unary_rpc_method_handler(
                    servicer.sendMarkerMask,
                    request_deserializer=segmenter__service__pb2.MarkerMask.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getMarkedMask2D': grpc.unary_unary_rpc_method_handler(
                    servicer.getMarkedMask2D,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=segmenter__service__pb2.Mask2D.SerializeToString,
            ),
            'getRegions': grpc.unary_unary_rpc_method_handler(
                    servicer.getRegions,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=segmenter__service__pb2.Mask2D.SerializeToString,
            ),
            'popState': grpc.unary_unary_rpc_method_handler(
                    servicer.popState,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=segmenter__service__pb2.Mask2D.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Segmenter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Segmenter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def loadImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Segmenter/loadImage',
            segmenter__service__pb2.LoadImageRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def newMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Segmenter/newMethod',
            segmenter__service__pb2.NewMethodRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendNewSens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Segmenter/sendNewSens',
            segmenter__service__pb2.SensitivityValue.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendMarkerMask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Segmenter/sendMarkerMask',
            segmenter__service__pb2.MarkerMask.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMarkedMask2D(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Segmenter/getMarkedMask2D',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            segmenter__service__pb2.Mask2D.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRegions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Segmenter/getRegions',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            segmenter__service__pb2.Mask2D.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def popState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Segmenter/popState',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            segmenter__service__pb2.Mask2D.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
